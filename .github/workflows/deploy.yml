name: Build and Deploy Quarkus App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for mvnw
        run: chmod +x ./mvnw

      - name: Build Quarkus App
        run: ./mvnw clean package -DskipTests -Dquarkus.profile=prod

      - name: Build Docker Image
        run: docker build -f src/main/docker/Dockerfile.jvm -t dompetly_be .

      - name: Save Docker Image to Tar
        run: docker save -o dompetly_be.tar dompetly_be

      - name: Copy Docker Image to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: dompetly_be.tar
          target: /home/${{ secrets.VPS_USER }}/project/dompetly_be

      - name: SSH and Deploy App
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            APP_PATH="/home/${{ secrets.VPS_USER }}/project/dompetly_be"
            cd $APP_PATH

            echo "üîê Generate JWT keys in correct format (PKCS#8)"
            mkdir -p jwt
            if [ ! -f jwt/privateKey.pem ]; then
              echo "‚û°Ô∏è Creating RSA key (PKCS#8)"
              openssl genrsa -out jwt/privateKey-pkcs1.pem 2048
              openssl pkcs8 -topk8 -inform PEM -outform PEM \
                -in jwt/privateKey-pkcs1.pem -out jwt/privateKey.pem -nocrypt
              rm jwt/privateKey-pkcs1.pem
            fi
            if [ ! -f jwt/publicKey.pem ]; then
              echo "‚û°Ô∏è Extracting public key"
              openssl rsa -in jwt/privateKey.pem -pubout -out jwt/publicKey.pem
            fi

            echo "üßπ Stop and remove existing container if exists"
            docker rm -f dompetly_be || true

            echo "üì¶ Load Docker image"
            docker load -i dompetly_be.tar

            echo "üöÄ Run container as 'dompetly_be'"
            docker run -d \
              --name dompetly_be \
              -v $APP_PATH/jwt/privateKey.pem:/deployments/resources/privateKey.pem \
              -v $APP_PATH/jwt/publicKey.pem:/deployments/resources/publicKey.pem \
              -e JDBC_USER=${{ secrets.DB_USER }} \
              -e JDBC_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -p 8080:8080 \
              --network host \
              dompetly_be