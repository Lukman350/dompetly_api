name: Deploy Quarkus App to VPS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build Quarkus application with Maven
        run: |
          chmod +x ./mvnw
          ./mvnw clean package -Dquarkus.container-image.build=false -Dquarkus.package.type=fast-jar -Dquarkus.profile=prod

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -f src/main/docker/Dockerfile.jvm -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /home/${{ secrets.VPS_USER }}/project/dompetly_api
            
            echo "Ensuring JWT key directory exists..."
            mkdir -p jwt_keys # Create directory on VPS host to store keys
            echo "${{ secrets.JWT_PRIVATE_KEY }}" > jwt_keys/privateKey.pem
            echo "${{ secrets.JWT_PUBLIC_KEY }}" > jwt_keys/publicKey.pem
            chmod 600 jwt_keys/privateKey.pem # Restrict permissions
            chmod 644 jwt_keys/publicKey.pem # Restrict permissions
            
            echo "Pulling latest Docker image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
            
            echo "Stopping and removing existing container..."
            docker-compose down || true
            
            echo "Starting new container with latest image..."
            # For volumes based approach:
            docker-compose up -d
            
            echo "Deployment complete!"